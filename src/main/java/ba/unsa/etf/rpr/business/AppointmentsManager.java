package ba.unsa.etf.rpr.business;

import ba.unsa.etf.rpr.dao.DaoFactory;
import ba.unsa.etf.rpr.domain.Appointments;
import ba.unsa.etf.rpr.exceptions.HairsalonException;

import java.util.List;
/**
 * This is a Java class called "AppointmentsManager" that provides a set of methods for managing Appointments objects.
 * The class uses the DaoFactory to access the Appointments DAO (Data Access Object) and perform CRUD (Create, Read, Update, Delete) operations on Appointments objects.
 * It also throws a HairsalonException in case of an error.
 * @author Nejra Adilovic
 */
public class AppointmentsManager {
    /**
     * Adds Appointments object to table APPOINTMENTS.
     * @param a Appointments
     * @return added Appointments
     * @throws HairsalonException in case of problems with db
     */
    public Appointments add(Appointments a) throws HairsalonException {
        if (a.getId() != 0) {
            throw new HairsalonException("Can't add Appointments with ID. ID is autogenerated");
        }
        return DaoFactory.appointmentsDao().add(a);
    }
    /**
     * Deletes appointments, from db table APPOINTMENTS, with a given id.
     * @param id int
     * @throws HairsalonException thrown in case of problem with db
     */
    public void delete(int id) throws HairsalonException {
        DaoFactory.appointmentsDao().delete(id);
    }
    /**
     * Updates appointments in db table STYLIST.
     * @param a Appointments
     * @throws HairsalonException thrown in case of problem with db
     */
    public void update(Appointments a) throws HairsalonException {
        DaoFactory.appointmentsDao().update(a);
    }
    /**
     * Fetches all Appointments objects from table APPOINTMENTS and stores it in a list.
     * @return List of all appointments
     * @throws HairsalonException thrown in case of problem with db
     */
    public List<Appointments> getAll() throws HairsalonException {
        return DaoFactory.appointmentsDao().getAll();
    }
    /**
     * Fetches Appointments object form table APPOINTMENTS defined by given id.
     * @param AppointmentsId int
     * @return Appointments object defined by given id
     * @throws HairsalonException in case of problems with db
     */
    public Appointments getById(int AppointmentsId) throws HairsalonException {
        return DaoFactory.appointmentsDao().getById(AppointmentsId);
    }
}
