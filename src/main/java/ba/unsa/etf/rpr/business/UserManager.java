package ba.unsa.etf.rpr.business;

import ba.unsa.etf.rpr.dao.DaoFactory;
import ba.unsa.etf.rpr.domain.User;
import ba.unsa.etf.rpr.exceptions.HairsalonException;

import java.util.List;
/**
 * This is a Java class called "UserManager" that provides a set of methods for managing User objects.
 * The class uses the DaoFactory to access the User DAO (Data Access Object) and perform CRUD (Create, Read, Update, Delete) operations on User objects.
 * It also throws a HairsalonException in case of an error.
 * @author Nejra Adilovic
 */
public class UserManager {

    public void validateUserName(String name) throws HairsalonException {
        if (name == null || name.length() > 45 || name.length() < 3) {
            throw new HairsalonException("User name must be between 6 and 15 chars");
        }
    }
    /**
     * Adds User object to table USER.
     * @param u User
     * @return added User
     * @throws HairsalonException in case of problems with db
     */
    public User add(User u) throws HairsalonException {
        if (u.getId() != 0) {
            throw new HairsalonException("Can't add User with ID. ID is autogenerated");
        }
        validateUserName(u.getUsername());

        try {
            return DaoFactory.userDao().add(u);
        } catch (HairsalonException e) {
            if (e.getMessage().contains("UQ_NAME")) {
                throw new HairsalonException("User with same username exists");
            }
            throw e;
        }
    }
    /**
     * Deletes user, from db table USER, with a given id.
     * @param UserId int
     * @throws HairsalonException thrown in case of problem with db
     */
    public void delete(int UserId) throws HairsalonException {
        try {
            DaoFactory.userDao().delete(UserId);
        } catch (HairsalonException e) {
            if (e.getMessage().contains("FOREIGN KEY")) {
                throw new HairsalonException("Cannot delete User which is related to appointments. First delete related appointments before deleting User.");
            }
            throw e;
        }

    }
    /**
     * Updates user in db table USER.
     * @param u User
     * @return User that is updated
     * @throws HairsalonException thrown in case of problem with db
     */
    public User update(User u) throws HairsalonException {
        validateUserName(u.getUsername());
        return DaoFactory.userDao().update(u);
    }
    /**
     *Fetches all User objects from table USER and stores it in a list.
     * @return List of all users
     * @throws HairsalonException thrown in case of problem with db
     */
    public List<User> getAll() throws HairsalonException {
        return DaoFactory.userDao().getAll();
    }
    /**
     * Fetches User object from table USER defined by given id.
     * @param userId int
     * @return User object defined by given id
     * @throws HairsalonException
     */
    public User getById(int userId) throws HairsalonException{
        return DaoFactory.userDao().getById(userId);
    }
    /**
     * Fetches User object from table USER defined by given first name.
     * @param first_name String
     * @return User
     * @throws HairsalonException thrown in case of problem with db
     */
    public User getByFirstName(String first_name) throws HairsalonException {
        return DaoFactory.userDao().getByFirstName(first_name);
    }
    /**
     * Fetches User object from table USER defined by given last name.
     * @param last_name String
     * @return User
     * @throws HairsalonException thrown in case of problem with db
     */
    public User getByLastName(String last_name) throws HairsalonException {
        return DaoFactory.userDao().getByLastName(last_name);
    }
    /**
     * Fetches User object from table USER defined by given username.
     * @param username String
     * @return User
     * @throws HairsalonException thrown in case of problem with db
     */
    public User getByUsername(String username) throws HairsalonException {
        return DaoFactory.userDao().getByUsername(username);
    }
    /**
     * Fetches User object from table USER defined by given boolean depending on if the user is an admin.
     * @param admin boolean
     * @return User
     * @throws HairsalonException thrown in case of problem with db
     */
    public User getByAdmin(boolean admin) throws HairsalonException{
        return DaoFactory.userDao().getByAdmin(admin);
    }
}
